BCACHEFS(5)
===========

NAME
----
bcachefs - bcachefs overview, user's manual and configuration

DESCRIPTION
-----------
Bcachefs is a multi device copy on write filesystem that supports

 Checksumming
 Compression
 Encryption
 Reflink
 Caching
 Replication
 Erasure coding (reed-solomon)

And more. This document is intended to be an overview of the various features
and use cases.

Configuration
-------------
Most configuration is done via filesystem options that can be set at format
time, mount time (as mount -o parameters), or changed at runtime via sysfs (via
the /sys/fs/bcachefs/<UUID>/options/ directory).

Many of those options (particularly those that control the IO path) can also be
set on individual files and directories, via the bcachefs setattr command (which
internally mostly works via the extended attribute interface, but the setattr
command takes care to propagate options to children correctly).

 * TODO: include master list of options from opts.h
#include "opts.mdwn"
FILE SYSTEM OPTIONS
      A filesystem formatted for bcachefs can have some collection of the following
      file system feature flags enabled.

      acl
              This option will enable POSIX acls.

      background_compression
              This option allows the background compression algorithm to be altered.
              The default is set to NONE, which means no background compression is
              utilized.

      background_target
              Device or disk group to move data to in the background.

      block_size
              This option allows the block size used by bcachefs to be changed
              from its default of 8KB.
      
      btree_node_size
              This option allows the size of each Btree node to be altered from
              its default size of 256KB.

      bucket
              This option allows the size of a bcachefs file system on device
              to be set manually.

      compression
              This option allows the compression algorithm used to be altered.
              The default is set to NONE, which means no compression utilized.

      data_checksum
              This option sets the checksum algorithm type to be used for
              storing data. The default is CRC32C.

      data_replicas
              The number of data replicas desired for device.

      data_replicas_required
              The minimum number of data replicas for device.

      degraded
              When set, this option enables mounting in degraded mode.

      discard
              When set, this option allows discard/TRIM support.

      durability
              Data written to this device will be considered to have
              already been replicated the specified number of times.
              The default is 1.

      erasure_code
              Enable erasure coding (WIP, DO NOT USE YET).

      errors
              The action to take upon file system errors.

      fix_errors
              When set, this options allows errors during fsck to
              be fixed without asking.

      foreground_target
              Device or disk group for foreground writes.

      fsck
              Run fsck on mount.

      fs_size
              This option allows the size of a bcachefs file system
              on device to be manually set.

      gc_reserve_bytes
              Amount of disk space to reserve for copygc.
              Takes precedence over gc_reserve_percent if set.

      gc_reserve_percent
              Percentage of disk space to reserve for copygc.

      grp_quotas
              When set, this option allows the use of group quotas.

      inline_data
              This option, when enabled, allows inline data extents.

      inodes_32bit
              This option allows the contraint of inode numbers to 32 bits.

      journal_flush_disabled
              Disable journal flush on sync/fsync.
              If enabled, writes can be lost, but only since the
              last journal write (default 1 second).

      keep_journal
              When set, this option will not free journal entries or keys
              after startup.

      metadata_checksum
              This option sets the checksum algorithm type to be used for
              storing metadata. The default is CRC32C.

      metadata_replicas
              The number of metadata replicas desired for device.

      metadata_replicas_required
              The minimum amount of metadata replicas required for device.

      nochanges
              Super read only mode.
              No writes at all will be issued, even if we have to replay
              the journal.

      noexcl
              When set, devices will not be opened in exclusive mode.

      norecovery
              This option will disable replay of the journal.

      nostart
              When set, this option will not start the file system.
              Only devices will be opened.

      prjquota
              When set, this option allows the use of project quotas.

      project
              TODO: Add discription of option.

      promote_target
              Device or disk group to promote data to on read.

      ratelimit_errors
              When set, this option allows Ratelimit error messages
              during fsck.

      read_entire_journal
              When set, this option will force reading of all journal
              entries, not just dirty ones.

      read_only
              When set, device or disk group will only be able to be
              read from.

      rebuild_replicas
              Rebuild the superblock replicas section.

      reconstruct_alloc
              When set, this option will reconstruct alloc btree.

      reflink
              When set, this option enables reflink support.

      root_reserve_percent
              Percentage of disk space to reserve for the superuser.

      sb
              Set the sector offset of the superblock.

      str_hash
              The hash function utilized for directory entries and xattrs.
              The default is set to SIPHASH.

      usrquota
              When set, this option allows the use of user quotas.

      verbose
              When set, this option provides extra debugging information
              during mount and recovery.

      version_upgrade
              This option will set the superblock to the latest version,
              allowing any new features to be used.

      wide_macs
              This option allows the storage of full 128 bits of 
              cryptographic MACs, instead of the default of 80 bits.

      

Device management
-----------------
Devices can be added, removed, and resized at will, at runtime. There is no
fixed topology or data layout, as with hardware RAID or ZFS, and devices need
not be the same size - the allocator will stripe across multiple disks,
preferring to allocate from disks with more free space so that disks all fill up
at the same time.

We generally avoid per-device options, preferring instead options that can be
overridden on files or directories, but there are some:

 *durability* 

Device labels, targets
----------------------

Configuration options that point to targets (i.e. a disk or group of disks) may
be passed either a device (i.e. /dev/sda), or a label. Labels are assigned to
disks (and need not be unique), and these labels form a nested heirarchy: this
allows disks to be grouped together and referred to either individually or as a
group.

For example, given disks formatted with these labels:

  bcachefs format -g controller1.hdd.hdd1 /dev/sda	\
                  -g controller1.hdd.hdd2 /dev/sdb	\
                  -g controller1.ssd.ssd1 /dev/sdc	\
                  -g controller1.ssd.ssd1 /dev/sdd	\
                  -g controller2.hdd1     /dev/sde	\
                  -g controller2.hdd2     /dev/sdf

Configuration options such as foreground_target may then refer to controller1,
or controller1.hdd, or controller1.hdd1 - or to /dev/sda directly.

Data placement, caching
-----------------------

The following options control which disks data is written to:

 * foreground_target
 * background_target
 * promote_target

The foreground_target option is used to direct writes from applications. The
background_target option, if set, will cause data to be moved to that target in
the background by the rebalance thread some time after it has been initially
written - leaving behind the original copy, but marking it cached so that it can
be discarded by the allocator. The promote_target will will cause reads to write
a cached copy of the data being read to that target, if it doesn't exist.

Together, these options can be used for writeback caching, like so:

  foregroud_target=ssd
  background_target=hdd
  promote_target=ssd

Writethrough caching requires telling bcachefs not to trust the cache device,
which does require a per-device option and thus can't completely be done with
per-file options. This is done by setting the device's durability to 0.

These options can all be set on individual files or directories. They can also
be used to pin a specific file or directory to a specific device or target:

  foreground_target=ssd
  background_target=
  promote_target=

Note that if the target specified is full, the write will spill over to the rest
of the filesystem.

Data protection
---------------

foo
